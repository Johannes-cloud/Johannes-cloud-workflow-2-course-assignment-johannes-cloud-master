{"version":3,"sources":["scripts/question-1/question-1.ts","scripts/question-2/question-2.ts","scripts/question-3/question-3.js","scripts/question-4/items.ts","scripts/question-4/question-4.ts","scripts/question-5/question-5.js","scripts/index.js"],"names":["getDiscountPercentage","normalPrice","discountedPrice","Math","round","formatDecimalSpaces","value","decimalSpaces","convertKrone","amount","toKrone","kroneValue","calculateTax","taxRate","fetch","JSON","stringify","query","then","res","json","console","log"],"mappings":"AAQA,ACRA,AIAA;ALSA,ACRA,AICAc,KAAK,CAAC,oCAAD,EAAuC;ACF5C,ANUA,ACRA,EICE,OLOO,GKPG,MADgC,CLQ5C,CAAoB,EAApB,EAAsE;ACPtE,EICE,ILMoB,MAAM,CKNf,ELMe,EAAA,CAAA;AMT5B,ALGA,IIAe,ELMe,SAAS,GAAA,EAAA,AKNR,CLMQ;ACLvC,EIDa,CAF+B,GLQH,QAAQ,GAAA,EAAA,CAAA,uEGVjD;AGEA,ALKA,EIFE,EJEG,EDG8C,GAAG,CKL5CC,ELK4C,CCHtD,CDGsD,AKLxC,CLKwC,AKLvCC,SAAL,CAAe;AFJzB,IAAM,AEKFC,ELIoD,EGT9C,CEKD,EFLI,EHSkD,GAAA,EAAA,CAAA;AMP/D,ALIA,CAAA,CDIE,AGVa,AEIU,CAAf,CFJO,EAAE,GHUV,AGVI,EFMR,SAAL,EAAc;AIL8B,CAAvC,CJMH,AEPsB,AECxB,CAkBGC,CLRC,EGXwB,CEC5B,CFD8B,AEmBtB,ELRE,CCJR,CDIQ,ACJR,EEPW,IHUJ,AKSDC,EJZN,CAAA,AIYS,GJZT,QAAA;AKJF,AJJA,EDSE,AERoC,AEmB3B,ELPP,GGZuC,EAAE,AEmB9BA,EJXb,CAAA,AIWgB,CLPL,AKOMC,ELPN,EKOE,EAAJ,IJXT,CDEO,ACFP,GAAA,WAAA;ACRF,ACAa,AEmBF,CFnBX,AECA,CJQE,CIUyBF,CLNvB,GKZJ,CAkBgCG,GJV9B,CDIU,ACJV,EDIU,CKM2B,CAACC,GJVtC,AIRF,CJQE,EDCO,CCDP,OAAA;AACD,ACTD,ACKS,CFAT,EAAK,CDQD,GAAG,AGRE,CAAA,CHQF,GAJE,ACJK,AEAL,GAAA,EFAJ,EEAI,OFAK,GAAA,EAAA,CAAd,GAkBA;ACtBA,ACDA,IHcI,AGdE,KAAK,EHcA,CGdG,CHcH;AEZX,EFOS,AGTO,CHSd,CGTgB,EAAE,EAAN;AHgBb,ACQD,ACrBA,ECHwB,IAAI,EAAE,CFwBrB,MExBK,IFwBd,CAAoB,IAApB,EAAkC,KAAlC,EAAoD,UAApD,EAAwE;ACpBxE,EDqBE,AEzBqC,KAAK,EFyBnC,AEzBqC;AHkB9C,AEbA,ACLc,ACFd,CDEA,GHkBM,ACQF,AG5BJ,IH4BQ,EAAE,CDRG,AIpBb,GJoBgB,ACOP,AG3BT,OAAA,CAAA,EJoB0B,CAAC,MIpB3B,CAAA;AFQA,ACDe,EHcb,ECQE,GEtBW,CHcP,AGdO,CFsBN,CDRC,CCQC,EEtBI,GFoBN,AEpBM,EHaY,GGbZ;ADEf,ACNA,ACUA,EJSE,ECQE,AE3BE,ACUN,MDVY,CHmBD,EAAE,AGnBE,CF2BD,EAAE,AGjBhB,EJO2B;AEVpB,AEGP,EJUE,ACIO,AExBQ,CFwBf,CExBiB,EAAE,EAAN,CDOCtB,CFaN,EAAE,UAHe,QEVpB,CAA+BC,WAA/B,EAA4CC,eAA5C,EAA6D;ADsBnE,AGnBD,EJWE,ACUF,ACvBE,ACRuB,GHqBpB,CGrBwB,CHqBtB,CGrBwB,CHiBJ,AETlBC,GEET,CFFa,CAACC,ECRC,GDQN,CAAW,MAAOF,eAAe,GAAGD,WAAnB,GAAkC,GAAnD,CAAP;AACD,EFaC,AGtBuC,ACUzC,KDV8C,EHsBrC,AGtBuC,EHsBrC,AIZX,YAAA,GAAA;AJO2B,AEN3B,ACXe,CHiBW,AGjB1B,CHiBA,EINE;AJcF,ACOA,ACpBA,ACRsB,IHqBhB,AIbJ,GDRoB,CAAA,CCQpB,CHoBQ,CAAC,CDPG,CIbZ,CDRoB,CHqBL,CIbY,CDRP,CCQpB,KDRoB,EHqBK,CAAE,ECOnB,EAAoB,SAAS,CAAC,MAA9B,CAAV;AACA,ACpBA,ACZA,EHyBE,AI8BD,CA9CD,CDTM,ACaJ,IJYM,EAAE,ACOA,AEhCE,CFgCD,EEhCI,KHwBc,aCQnB,EAAuB,SAAS,CAAC,SAAjC,EAA4C,IAA5C,CAAV;AACA,ACpBA,EFaE,AG1Be,EAAE,EAAE,CFiCd,CAAC,AEjCO,GH0BJ,ACOX,CAAY,CDPC,MAFgB,GCSP,CAAC,iBAAD,EAAoB,SAAS,CAAC,MAA9B,CAAtB;AACA,ACpBA,EFaE,AG3BuB,IAAI,CFkCtB,CAAC,AElCuB,EH2BrB,CCOV,CDPY,ACOA,IElCG,MHwBc,ACUP,CAAC,oBAAD,EAAuB,SAAS,CAAC,SAAjC,EAA4C,IAA5C,CAAtB;ACnBA,EFaE,AG5BuC,ACcvC,GJcG,EAAE,AG5BuC,EHwBjB,AGxBmB,KCc9C,CAAA,SAAA,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","file":"scripts.bcf3243b.js","sourceRoot":"..","sourcesContent":["interface User {\n  school?: string;\n  firstName: string;\n  lastName: string;\n  age: number;\n  isAdmin?: boolean;\n}\n\n// Convert the function to TypeScript, making sure to use the\n//  User interface as the return type\nfunction createUser({ school, firstName, lastName, age, isAdmin}: User) {\n  return {\n    school,\n    firstName,\n    lastName,\n    age,\n    isAdmin,\n  };\n}\n\nconst newUser = createUser({\n  school: 'Noroff',\n  firstName: 'Ola',\n  lastName: 'Nordmann',\n  age: 18,\n  isAdmin: false,\n});\n\nconst newAdmin = createUser ({\n  school: 'Noroff',\n  firstName: 'Kari',\n  lastName: 'Nordmann',\n  age: 36,\n  isAdmin: true,\n});\n\nconsole.log(newUser);\nconsole.log(newAdmin);","// 1. Create an enum (GameGenre):\n// Create an enum called GameGenre with the following key/value pairs. The value\n//    should be the same as the key:\n// - Action\n// - Adventure\n// - Sport\n\nenum GameGenre {\n  Action = 'ACTION',\n  Adventure = 'ADVENTURE',\n  Sport = 'SPORT',\n}\n\n// 2. Create an interface (Game):\n// Create an interface called Game with the following values:\n// name: string\n// genre: The GameGenre enum\n// onlinePlay: boolean, optional\n\ninterface Game {\n  name: string,\n  genre: GameGenre,\n  onlinePlay?: boolean\n}\n\n// 3. Convert the function to TypeScript. Use your interface from above as the parameter.\nfunction createGame(name: string, genre: GameGenre, onlinePlay?: boolean):Game {\n  return {\n    name: name,\n    genre: genre,\n    onlinePlay: onlinePlay\n  }\n}\n\n// 4. Change these function calls to use the enum you created in step 1\ncreateGame('Fun action game', GameGenre.Action);\ncreateGame('Fun adventure game', GameGenre.Adventure, true,);\nconsole.log(createGame('Fun action game', GameGenre.Action));\nconsole.log(createGame('Fun adventure game', GameGenre.Adventure, true,));","/**\n * Calculates the discount percentage from a normal price\n * and a discounted price.\n * @param normalPrice Regular price before discount\n * @param discountedPrice The discounted price\n * @returns The discount percentage\n * @example\n * // Expect 25\n * getDiscountPercentage(100, 75);\n */\nexport function getDiscountPercentage(normalPrice, discountedPrice) {\n  return Math.round(100 - (discountedPrice / normalPrice) * 100);\n}\n\n/**\n * Converts a value to 2 decimal spaces\n * @param value The amount that will have the decimal places applied to\n * @param decimalSpaces How many decimal spaces to use, defaults to 2\n * @returns The value with decimal spaces and rounding applied to it\n * @example\n * // Expect 15.56\n * formatDecimalSpaces(15.5555555);\n */\nexport function formatDecimalSpaces(value, decimalSpaces = 2) {\n  return +(Math.round(value + `e+${decimalSpaces}`) + `e-${decimalSpaces}`);\n}\n\n/**\n * Converts a value to or from Krone\n * @param amount The amount to be converted\n * @param kroneValue The value of Krone when converting e.g. 1 Euro = 10.18 Krone\n * @param toKrone Toggle whether to convert to or from Krone\n * @returns Amount converted\n * @example\n * // Expect 101.80\n * convertToKrone(10)\n */\nexport function convertKrone(amount, toKrone = true, kroneValue = 10.18) {\n  if (toKrone) {\n    return formatDecimalSpaces(amount * kroneValue);\n  }\n  return formatDecimalSpaces(amount / kroneValue);\n}\n\n/**\n * Calculates the tax for an amount given\n * @param amount Amount to be calculated\n * @param taxRate The tax rate being applied\n * @returns Amount with tax applied\n * // Expect 125\n * calculateTax(100)\n */\nexport function calculateTax(amount, taxRate = 25) {\n  return formatDecimalSpaces(amount + amount * (taxRate / 100));\n}\n","// These are items to use in the shopping cart\nconst milk = { id: 942, name: 'Milk', price: 19.99 };\nconst bread = { id: 24, name: 'Bread', price: 9.25 };\nconst cheese = { id: 52, name: 'Cheese', price: 5.95 };\nconst tomato = { id: 84, name: 'Tomato', price: 3.5 };\nconst lettuce = { id: 663, name: 'Lettuce', price: 1.95 };\n\nexport { milk, bread, cheese, tomato, lettuce };\n","import { bread, cheese, lettuce, milk, tomato } from './items';\n\n// Create an interface called \"Item\" with the following variables and types:\n// id: number\n// name: string\n// price: number\n\nexport interface ExampleItem {\n  id: number;\n  name: string;\n  price: number;\n}\n\nexport class ShoppingCart {\n  // Add the correct array type to cart\n  cart: Array<ExampleItem> = [];\n\n  // Add the correct return type\n  getCostTotal() {\n    const costTotal = this.cart.reduce((total, currentItem) => {\n      total += currentItem.price;\n      return total;\n    }, 0);\n    return costTotal;\n  }\n\n  // Add the correct return type\n  getNumberOfItems() {\n    return this.cart.length;\n  }\n\n  // Add the correct return type\n  getCart() {\n    return [...this.cart];\n  }\n\n  // Set the parameter to be of the Item type and set the return\n  //    type to be of the correct type\n  addToCart(item: ExampleItem) {\n    const itemExists = this.cart.find((currentItem) => {\n      if (currentItem.id === item.id) {\n        return true;\n      }\n    });\n    if (!itemExists) {\n      this.cart.push(item);\n    }\n  }\n\n  // Set the parameter to be of the Item type and set the return\n  //    type to be of the correct type\n  removeFromCart(item: ExampleItem) {\n    const newCart = this.cart.filter((currentItem) => {\n      if (currentItem.id !== item.id) {\n        return true;\n      }\n    });\n    this.cart = [...newCart];\n  }\n}\n\n// Examples, feel free to delete\nconst myCart = new ShoppingCart();\nmyCart.addToCart(bread);\nmyCart.removeFromCart(bread);\n","// API url: https://graphqlzero.almansi.me/api\n\nfetch(\"https://graphqlzero.almansi.me/api\", {\n  \"method\": \"POST\",\n  \"headers\": { \"content-type\": \"application/json\" },\n  \"body\": JSON.stringify({\n    query: `query (\n        $options: PageQueryOptions\n      ) {\n        posts(options: $options) {\n          data {\n            id\n            title\n          }\n          meta {\n            totalCount\n          }\n        }\n      }`\n  })\n}).then(res => res.json()).then(console.log)\n\n","import './question-1/question-1';\nimport './question-2/question-2';\nimport './question-3/question-3';\nimport './question-4/question-4';\nimport './question-5/question-5';\n"]}